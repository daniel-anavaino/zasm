0001   0000             ;;
0002   0000             ;; ZASM.ASM
0003   0000             ;;   Print "Hello World" on the screen.
0004   0000             ;;   Uses a string print mechanism including a data block
0005   0000             ; assemble with:  TASM -80 -b -s hello.asm hello.p
0006   0000             
0007   0000             #define AUTORUN line1
0008   0000             #include "support/zx81strt.asm"
0001+  0000             ;;
0002+  0000             ;; LINE0.ASM
0003+  0000             ;; The REM statement that the main code will be embedded in.
0004+  0000             ;;                10                  REM
0005+  0000             #include "support/rom.asm"
0001++ 0000             ;;
0002++ 0000             ;; ROM.ASM
0003++ 0000             ;;   ZX81 ROM routines 
0004++ 0000             
0005++ 0000             CLS			.equ	$0A2A
0006++ 0000             DECODE		.equ	$07BD
0007++ 0000             FAST		.equ	$0F23
0008++ 0000             KEYBOARD	.equ	$02BB
0009++ 0000             PAUSE		.equ	$0F35
0010++ 0000             PLOT		.equ	$0BB2
0011++ 0000             PRINT 		.equ	$0010
0012++ 0000             PRINTAT		.equ	$08F5
0013++ 0000             SCROLL		.equ	$0C0E
0014++ 0000             SLOW		.equ	$0F2B
0006+  0000             #include "support/tokens.asm"
0001++ 0000             ;;
0002++ 0000             ;; TOKENS.ASM
0003++ 0000             ;;    ZX81 BASIC tokens
0004++ 0000             
0005++ 0000             #define LINE_NUMBER(n) .msfirst\ .word n\ .lsfirst
0006++ 0000             #define LINE_LENGTH(start,end) .word end - start - 4
0007++ 0000             _PRINT 	.equ $F5
0008++ 0000             _RAND	.equ $F9
0009++ 0000             _REM	.equ $EA
0010++ 0000             _USR	.equ $D4
0007+  0000             #include "support/charcode.asm"
0001++ 0000             ;;
0002++ 0000             ;; CHARCODE.ASM
0003++ 0000             ;;   Definitions for the character codes since it's not ASCII
0004++ 0000             
0005++ 0000             _SPACE .equ 0
0006++ 0000             
0007++ 0000             _LPAREN .equ 16
0008++ 0000             _RPAREN .equ 17
0009++ 0000             _0 .equ 28
0010++ 0000             _1 .equ 29
0011++ 0000             _2 .equ 30
0012++ 0000             _3 .equ 31
0013++ 0000             _4 .equ 32
0014++ 0000             _5 .equ 33
0015++ 0000             _6 .equ 34
0016++ 0000             _7 .equ 35
0017++ 0000             _8 .equ 36
0018++ 0000             _9 .equ 37
0019++ 0000             _A .equ 38
0020++ 0000             _B .equ 39
0021++ 0000             _C .equ 40
0022++ 0000             _D .equ 41
0023++ 0000             _E .equ 42
0024++ 0000             _F .equ 43
0025++ 0000             _G .equ 44
0026++ 0000             _H .equ 45
0027++ 0000             _I .equ 46
0028++ 0000             _J .equ 47
0029++ 0000             _K .equ 48
0030++ 0000             _L .equ 49
0031++ 0000             _M .equ 50
0032++ 0000             _N .equ 51
0033++ 0000             _O .equ 52
0034++ 0000             _P .equ 53
0035++ 0000             _Q .equ 54
0036++ 0000             _R .equ 55
0037++ 0000             _S .equ 56
0038++ 0000             _T .equ 57
0039++ 0000             _U .equ 58
0040++ 0000             _V .equ 59
0041++ 0000             _W .equ 60
0042++ 0000             _X .equ 61
0043++ 0000             _Y .equ 62
0044++ 0000             _Z .equ 63
0045++ 0000             
0046++ 0000             _EOL .equ $760008+  0000             #include "support/sysvars.asm"
0001++ 0000             ;;
0002++ 0000             ;; SYSVARS.ASM
0003++ 0000             ;;   Defines the system variables 
0004++ 0000             
0005++ 0000             ;; Start of saved variables
0006++ 4009             	.org	16393
0007++ 4009 00          VERSN		.byte 0
0008++ 400A 0A 00       E_PPC		.byte 10,0
0009++ 400C B5 40       D_FILE		.word display-1
0010++ 400E B6 40       DF_CC		.word display
0011++ 4010 CE 43       VARS		.word variables
0012++ 4012 00 00       DEST		.byte 0,0
0013++ 4014 CF 43       E_LINE		.word variables+1
0014++ 4016 D7 43       CH_ADD		.word variables+9
0015++ 4018 00 00       X_PTR		.word 0
0016++ 401A D8 43       STKBOT		.word variables+10
0017++ 401C D8 43       STKEND		.word variables+10
0018++ 401E 00          BERG		.byte 0
0019++ 401F 5D 40       MEM			.word MEMBOT
0020++ 4021 00          			.byte 0
0021++ 4022 02          DF_SZ		.byte 2
0022++ 4023 00 00       S_TOP		.word 0
0023++ 4025 FF FF       LAST_K		.word $ffff
0024++ 4027 FF          			.byte $ff
0025++ 4028 37          MARGIN		.byte 55
0026++ 4029 A1 40       NXTLIN		.word AUTORUN
0027++ 402B 00 00       OLDPPC		.word 0
0028++ 402D 00          FLGX		.byte 0
0029++ 402E 00 00       STRLEN		.word 0
0030++ 4030 8D 0C       T_ADDR		.word $0c8d
0031++ 4032 00 00       SEED		.word 0
0032++ 4034 17 F6       FRAMES		.word $f617
0033++ 4036 00          COORDS		.byte 0
0034++ 4037 00          			.byte 0
0035++ 4038 BC          PR_CC		.byte $bc
0036++ 4039 01          S_POSN		.byte $1
0037++ 403A 01          			.byte $1
0038++ 403B 40          CDFLAG		.byte $40
0039++ 403C 00 00 00 00 PRBUFF		.fill 32,0
0039++ 4040 00 00 00 00 
0039++ 4044 00 00 00 00 
0039++ 4048 00 00 00 00 
0039++ 404C 00 00 00 00 
0039++ 4050 00 00 00 00 
0039++ 4054 00 00 00 00 
0039++ 4058 00 00 00 00 
0040++ 405C 76          			.byte _EOL
0041++ 405D 00 00 00 00 MEMBOT		.fill 30,0
0041++ 4061 00 00 00 00 
0041++ 4065 00 00 00 00 
0041++ 4069 00 00 00 00 
0041++ 406D 00 00 00 00 
0041++ 4071 00 00 00 00 
0041++ 4075 00 00 00 00 
0041++ 4079 00 00 
0042++ 407B 00 00       			.byte 0,0
0043++ 407D             
0009+  407D             
0010+  407D             ;; 10 REM 
0011+  407D             ;;
0012+  407D             line0	LINE_NUMBER(10)
0012+  407D 00 0A       
0012+  407F             
0013+  407F 20 00       		LINE_LENGTH(line0, line0end) ; length of line 
0014+  4081 EA          		.byte _REM
0015+  4082             
0009   4082             
0010   4082 21 93 40    		LD		HL,line		;load HL with address of line
0011   4085 7E          PLINE	LD		A,(HL)		;load A with a character at HL
0012   4086 FE FF       		CP		$FF			;is this $FF
0013   4088 CA 92 40    		JP		Z,END		;if so, then jump to end
0014   408B CD 10 00    		CALL	PRINT			;print character
0015   408E 23          		INC		HL			;increment HL to get to next character
0016   408F C3 85 40    		JP		PLINE		;jump to beginning of loop
0017   4092 C9          END		RET					;exit 
0018   4093             
0019   4093 2D 2A 31 31 line:		.byte  _H,_E,_L,_L,_O,_SPACE,_W,_O,_R,_L,_D,$76,$ff
0019   4097 34 00 3C 34 
0019   409B 37 31 29 76 
0019   409F FF 
0020   40A0             
0021   40A0             #include "support/zx81end.asm"
0001+  40A0             ;;
0002+  40A0             ;; LINE1.ASM
0003+  40A0             ;; The end of REM statement and the USR command to execute
0004+  40A0             ;; the code embedded in the rem statement
0005+  40A0 76          	.byte	_EOL	; ends line0 (the REM statement)
0006+  40A1             line0end
0007+  40A1             
0008+  40A1             ;; 20 RAND USR(16514)
0009+  40A1             line1	LINE_NUMBER(20)
0009+  40A1 00 14       
0009+  40A3             
0010+  40A3 10 00       		LINE_LENGTH(line1, line1end)
0011+  40A5 F9 D4 10 1D 		.byte _RAND,_USR,_LPAREN,_1,_6,_5,_1,_4,126,143,1,4,0,0,_RPAREN,_EOL
0011+  40A9 22 21 1D 20 
0011+  40AD 7E 8F 01 04 
0011+  40B1 00 00 11 76 
0012+  40B5             line1end
0013+  40B5 76          		.byte _EOL	; end of program
0014+  40B6             
0015+  40B6             display
0016+  40B6 00 00 00 00 	.fill 32,_SPACE
0016+  40BA 00 00 00 00 
0016+  40BE 00 00 00 00 
0016+  40C2 00 00 00 00 
0016+  40C6 00 00 00 00 
0016+  40CA 00 00 00 00 
0016+  40CE 00 00 00 00 
0016+  40D2 00 00 00 00 
0017+  40D6 76          	.byte _EOL
0018+  40D7 00 00 00 00 	.fill 32,_SPACE
0018+  40DB 00 00 00 00 
0018+  40DF 00 00 00 00 
0018+  40E3 00 00 00 00 
0018+  40E7 00 00 00 00 
0018+  40EB 00 00 00 00 
0018+  40EF 00 00 00 00 
0018+  40F3 00 00 00 00 
0019+  40F7 76          	.byte _EOL
0020+  40F8 00 00 00 00 	.fill 32,_SPACE
0020+  40FC 00 00 00 00 
0020+  4100 00 00 00 00 
0020+  4104 00 00 00 00 
0020+  4108 00 00 00 00 
0020+  410C 00 00 00 00 
0020+  4110 00 00 00 00 
0020+  4114 00 00 00 00 
0021+  4118 76          	.byte _EOL
0022+  4119 00 00 00 00 	.fill 32,_SPACE
0022+  411D 00 00 00 00 
0022+  4121 00 00 00 00 
0022+  4125 00 00 00 00 
0022+  4129 00 00 00 00 
0022+  412D 00 00 00 00 
0022+  4131 00 00 00 00 
0022+  4135 00 00 00 00 
0023+  4139 76          	.byte _EOL
0024+  413A 00 00 00 00 	.fill 32,_SPACE
0024+  413E 00 00 00 00 
0024+  4142 00 00 00 00 
0024+  4146 00 00 00 00 
0024+  414A 00 00 00 00 
0024+  414E 00 00 00 00 
0024+  4152 00 00 00 00 
0024+  4156 00 00 00 00 
0025+  415A 76          	.byte _EOL
0026+  415B 00 00 00 00 	.fill 32,_SPACE
0026+  415F 00 00 00 00 
0026+  4163 00 00 00 00 
0026+  4167 00 00 00 00 
0026+  416B 00 00 00 00 
0026+  416F 00 00 00 00 
0026+  4173 00 00 00 00 
0026+  4177 00 00 00 00 
0027+  417B 76          	.byte _EOL
0028+  417C 00 00 00 00 	.fill 32,_SPACE
0028+  4180 00 00 00 00 
0028+  4184 00 00 00 00 
0028+  4188 00 00 00 00 
0028+  418C 00 00 00 00 
0028+  4190 00 00 00 00 
0028+  4194 00 00 00 00 
0028+  4198 00 00 00 00 
0029+  419C 76          	.byte _EOL
0030+  419D 00 00 00 00 	.fill 32,_SPACE
0030+  41A1 00 00 00 00 
0030+  41A5 00 00 00 00 
0030+  41A9 00 00 00 00 
0030+  41AD 00 00 00 00 
0030+  41B1 00 00 00 00 
0030+  41B5 00 00 00 00 
0030+  41B9 00 00 00 00 
0031+  41BD 76          	.byte _EOL
0032+  41BE 00 00 00 00 	.fill 32,_SPACE
0032+  41C2 00 00 00 00 
0032+  41C6 00 00 00 00 
0032+  41CA 00 00 00 00 
0032+  41CE 00 00 00 00 
0032+  41D2 00 00 00 00 
0032+  41D6 00 00 00 00 
0032+  41DA 00 00 00 00 
0033+  41DE 76          	.byte _EOL
0034+  41DF 00 00 00 00 	.fill 32,_SPACE
0034+  41E3 00 00 00 00 
0034+  41E7 00 00 00 00 
0034+  41EB 00 00 00 00 
0034+  41EF 00 00 00 00 
0034+  41F3 00 00 00 00 
0034+  41F7 00 00 00 00 
0034+  41FB 00 00 00 00 
0035+  41FF 76          	.byte _EOL
0036+  4200 00 00 00 00 	.fill 32,_SPACE
0036+  4204 00 00 00 00 
0036+  4208 00 00 00 00 
0036+  420C 00 00 00 00 
0036+  4210 00 00 00 00 
0036+  4214 00 00 00 00 
0036+  4218 00 00 00 00 
0036+  421C 00 00 00 00 
0037+  4220 76          	.byte _EOL
0038+  4221 00 00 00 00 	.fill 32,_SPACE
0038+  4225 00 00 00 00 
0038+  4229 00 00 00 00 
0038+  422D 00 00 00 00 
0038+  4231 00 00 00 00 
0038+  4235 00 00 00 00 
0038+  4239 00 00 00 00 
0038+  423D 00 00 00 00 
0039+  4241 76          	.byte _EOL
0040+  4242 00 00 00 00 	.fill 32,_SPACE
0040+  4246 00 00 00 00 
0040+  424A 00 00 00 00 
0040+  424E 00 00 00 00 
0040+  4252 00 00 00 00 
0040+  4256 00 00 00 00 
0040+  425A 00 00 00 00 
0040+  425E 00 00 00 00 
0041+  4262 76          	.byte _EOL
0042+  4263 00 00 00 00 	.fill 32,_SPACE
0042+  4267 00 00 00 00 
0042+  426B 00 00 00 00 
0042+  426F 00 00 00 00 
0042+  4273 00 00 00 00 
0042+  4277 00 00 00 00 
0042+  427B 00 00 00 00 
0042+  427F 00 00 00 00 
0043+  4283 76          	.byte _EOL
0044+  4284 00 00 00 00 	.fill 32,_SPACE
0044+  4288 00 00 00 00 
0044+  428C 00 00 00 00 
0044+  4290 00 00 00 00 
0044+  4294 00 00 00 00 
0044+  4298 00 00 00 00 
0044+  429C 00 00 00 00 
0044+  42A0 00 00 00 00 
0045+  42A4 76          	.byte _EOL
0046+  42A5 00 00 00 00 	.fill 32,_SPACE
0046+  42A9 00 00 00 00 
0046+  42AD 00 00 00 00 
0046+  42B1 00 00 00 00 
0046+  42B5 00 00 00 00 
0046+  42B9 00 00 00 00 
0046+  42BD 00 00 00 00 
0046+  42C1 00 00 00 00 
0047+  42C5 76          	.byte _EOL
0048+  42C6 00 00 00 00 	.fill 32,_SPACE
0048+  42CA 00 00 00 00 
0048+  42CE 00 00 00 00 
0048+  42D2 00 00 00 00 
0048+  42D6 00 00 00 00 
0048+  42DA 00 00 00 00 
0048+  42DE 00 00 00 00 
0048+  42E2 00 00 00 00 
0049+  42E6 76          	.byte _EOL
0050+  42E7 00 00 00 00 	.fill 32,_SPACE
0050+  42EB 00 00 00 00 
0050+  42EF 00 00 00 00 
0050+  42F3 00 00 00 00 
0050+  42F7 00 00 00 00 
0050+  42FB 00 00 00 00 
0050+  42FF 00 00 00 00 
0050+  4303 00 00 00 00 
0051+  4307 76          	.byte _EOL
0052+  4308 00 00 00 00 	.fill 32,_SPACE
0052+  430C 00 00 00 00 
0052+  4310 00 00 00 00 
0052+  4314 00 00 00 00 
0052+  4318 00 00 00 00 
0052+  431C 00 00 00 00 
0052+  4320 00 00 00 00 
0052+  4324 00 00 00 00 
0053+  4328 76          	.byte _EOL
0054+  4329 00 00 00 00 	.fill 32,_SPACE
0054+  432D 00 00 00 00 
0054+  4331 00 00 00 00 
0054+  4335 00 00 00 00 
0054+  4339 00 00 00 00 
0054+  433D 00 00 00 00 
0054+  4341 00 00 00 00 
0054+  4345 00 00 00 00 
0055+  4349 76          	.byte _EOL
0056+  434A 00 00 00 00 	.fill 32,_SPACE
0056+  434E 00 00 00 00 
0056+  4352 00 00 00 00 
0056+  4356 00 00 00 00 
0056+  435A 00 00 00 00 
0056+  435E 00 00 00 00 
0056+  4362 00 00 00 00 
0056+  4366 00 00 00 00 
0057+  436A 76          	.byte _EOL
0058+  436B 00 00 00 00 	.fill 32,_SPACE
0058+  436F 00 00 00 00 
0058+  4373 00 00 00 00 
0058+  4377 00 00 00 00 
0058+  437B 00 00 00 00 
0058+  437F 00 00 00 00 
0058+  4383 00 00 00 00 
0058+  4387 00 00 00 00 
0059+  438B 76          	.byte _EOL
0060+  438C 00 00 00 00 	.fill 32,_SPACE
0060+  4390 00 00 00 00 
0060+  4394 00 00 00 00 
0060+  4398 00 00 00 00 
0060+  439C 00 00 00 00 
0060+  43A0 00 00 00 00 
0060+  43A4 00 00 00 00 
0060+  43A8 00 00 00 00 
0061+  43AC 76          	.byte _EOL
0062+  43AD 00 00 00 00 	.fill 32,_SPACE
0062+  43B1 00 00 00 00 
0062+  43B5 00 00 00 00 
0062+  43B9 00 00 00 00 
0062+  43BD 00 00 00 00 
0062+  43C1 00 00 00 00 
0062+  43C5 00 00 00 00 
0062+  43C9 00 00 00 00 
0063+  43CD 76          	.byte _EOL
0064+  43CE 80          variables	.byte $80
0065+  43CF             
0066+  43CF             	.end0022   43CF             
tasm: Number of errors = 0
